
chicken_coop_door_f042k6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d60  08002d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da0  08002da0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002da0  08002da0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002da0  08002da0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da0  08002da0  00003da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002da4  08002da4  00003da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002da8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002db4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002db4  000040b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005721  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001822  00000000  00000000  00009755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000522  00000000  00000000  0000b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fc1  00000000  00000000  0000bb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008908  00000000  00000000  00023b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086dc9  00000000  00000000  0002c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001718  00000000  00000000  000b3268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b4980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d48 	.word	0x08002d48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d48 	.word	0x08002d48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	@ 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 fd47 	bl	8002cc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000236:	4b3d      	ldr	r3, [pc, #244]	@ (800032c <MX_GPIO_Init+0x10c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b3c      	ldr	r3, [pc, #240]	@ (800032c <MX_GPIO_Init+0x10c>)
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	03c9      	lsls	r1, r1, #15
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b39      	ldr	r3, [pc, #228]	@ (800032c <MX_GPIO_Init+0x10c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	03db      	lsls	r3, r3, #15
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	4b36      	ldr	r3, [pc, #216]	@ (800032c <MX_GPIO_Init+0x10c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b35      	ldr	r3, [pc, #212]	@ (800032c <MX_GPIO_Init+0x10c>)
 8000258:	2180      	movs	r1, #128	@ 0x80
 800025a:	0289      	lsls	r1, r1, #10
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b32      	ldr	r3, [pc, #200]	@ (800032c <MX_GPIO_Init+0x10c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	029b      	lsls	r3, r3, #10
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b2f      	ldr	r3, [pc, #188]	@ (800032c <MX_GPIO_Init+0x10c>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b2e      	ldr	r3, [pc, #184]	@ (800032c <MX_GPIO_Init+0x10c>)
 8000274:	2180      	movs	r1, #128	@ 0x80
 8000276:	02c9      	lsls	r1, r1, #11
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b2b      	ldr	r3, [pc, #172]	@ (800032c <MX_GPIO_Init+0x10c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	@ 0x80
 8000282:	02db      	lsls	r3, r3, #11
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_PWM_Pin|R_EN_Pin|L_EN_Pin|L_PWM_Pin, GPIO_PIN_RESET);
 800028a:	2390      	movs	r3, #144	@ 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	2200      	movs	r2, #0
 8000290:	211b      	movs	r1, #27
 8000292:	0018      	movs	r0, r3
 8000294:	f001 f8d0 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_CE_Pin|RF_CSN_Pin, GPIO_PIN_RESET);
 8000298:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <MX_GPIO_Init+0x110>)
 800029a:	2200      	movs	r2, #0
 800029c:	21c0      	movs	r1, #192	@ 0xc0
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 f8ca 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_PWM_Pin R_EN_Pin L_EN_Pin L_PWM_Pin */
  GPIO_InitStruct.Pin = R_PWM_Pin|R_EN_Pin|L_EN_Pin|L_PWM_Pin;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	221b      	movs	r2, #27
 80002a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2201      	movs	r2, #1
 80002ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	193a      	adds	r2, r7, r4
 80002be:	2390      	movs	r3, #144	@ 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 ff4f 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 80002ca:	0021      	movs	r1, r4
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2202      	movs	r2, #2
 80002d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2284      	movs	r2, #132	@ 0x84
 80002d6:	0392      	lsls	r2, r2, #14
 80002d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80002e0:	000c      	movs	r4, r1
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	4a12      	ldr	r2, [pc, #72]	@ (8000330 <MX_GPIO_Init+0x110>)
 80002e6:	0019      	movs	r1, r3
 80002e8:	0010      	movs	r0, r2
 80002ea:	f000 ff3d 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CE_Pin RF_CSN_Pin */
  GPIO_InitStruct.Pin = RF_CE_Pin|RF_CSN_Pin;
 80002ee:	0021      	movs	r1, r4
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	22c0      	movs	r2, #192	@ 0xc0
 80002f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2201      	movs	r2, #1
 80002fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2203      	movs	r2, #3
 8000306:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000308:	187b      	adds	r3, r7, r1
 800030a:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <MX_GPIO_Init+0x110>)
 800030c:	0019      	movs	r1, r3
 800030e:	0010      	movs	r0, r2
 8000310:	f000 ff2a 	bl	8001168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000314:	2200      	movs	r2, #0
 8000316:	2100      	movs	r1, #0
 8000318:	2005      	movs	r0, #5
 800031a:	f000 fef3 	bl	8001104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800031e:	2005      	movs	r0, #5
 8000320:	f000 ff05 	bl	800112e <HAL_NVIC_EnableIRQ>

}
 8000324:	46c0      	nop			@ (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b009      	add	sp, #36	@ 0x24
 800032a:	bd90      	pop	{r4, r7, pc}
 800032c:	40021000 	.word	0x40021000
 8000330:	48000400 	.word	0x48000400

08000334 <Move_Forward>:
 */

#include <linear_actuator_12vdc.h>

void Move_Forward()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

    /* Set direction - enable right side, disable left side */
	HAL_GPIO_WritePin(R_EN_GPIO_Port, R_EN_Pin, GPIO_PIN_SET);
 8000338:	2390      	movs	r3, #144	@ 0x90
 800033a:	05db      	lsls	r3, r3, #23
 800033c:	2201      	movs	r2, #1
 800033e:	2102      	movs	r1, #2
 8000340:	0018      	movs	r0, r3
 8000342:	f001 f879 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_EN_GPIO_Port, L_EN_Pin, GPIO_PIN_SET);
 8000346:	2390      	movs	r3, #144	@ 0x90
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	2201      	movs	r2, #1
 800034c:	2108      	movs	r1, #8
 800034e:	0018      	movs	r0, r3
 8000350:	f001 f872 	bl	8001438 <HAL_GPIO_WritePin>

	/* Set PWM duty cycle for speed control */
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
	HAL_GPIO_WritePin(R_PWM_GPIO_Port, R_PWM_Pin, GPIO_PIN_RESET);
 8000354:	2390      	movs	r3, #144	@ 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2200      	movs	r2, #0
 800035a:	2101      	movs	r1, #1
 800035c:	0018      	movs	r0, r3
 800035e:	f001 f86b 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_PWM_GPIO_Port, L_PWM_Pin, GPIO_PIN_SET);
 8000362:	2390      	movs	r3, #144	@ 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2201      	movs	r2, #1
 8000368:	2110      	movs	r1, #16
 800036a:	0018      	movs	r0, r3
 800036c:	f001 f864 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000370:	46c0      	nop			@ (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <Move_Backward>:
/**
 * @brief Move actuator backward at specified speed
 * @param speed - PWM duty cycle (0-1000 representing 0-100%)
 */
void Move_Backward()
{
 8000376:	b580      	push	{r7, lr}
 8000378:	af00      	add	r7, sp, #0

    /* Set direction - enable left side, disable right side */
	HAL_GPIO_WritePin(R_EN_GPIO_Port, R_EN_Pin, GPIO_PIN_SET);
 800037a:	2390      	movs	r3, #144	@ 0x90
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	2201      	movs	r2, #1
 8000380:	2102      	movs	r1, #2
 8000382:	0018      	movs	r0, r3
 8000384:	f001 f858 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_EN_GPIO_Port, L_EN_Pin, GPIO_PIN_SET);
 8000388:	2390      	movs	r3, #144	@ 0x90
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f851 	bl	8001438 <HAL_GPIO_WritePin>

	/* Set PWM duty cycle for speed control */
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
	HAL_GPIO_WritePin(L_PWM_GPIO_Port, L_PWM_Pin, GPIO_PIN_RESET);
 8000396:	2390      	movs	r3, #144	@ 0x90
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	2200      	movs	r2, #0
 800039c:	2110      	movs	r1, #16
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 f84a 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_PWM_GPIO_Port, R_PWM_Pin, GPIO_PIN_SET);
 80003a4:	2390      	movs	r3, #144	@ 0x90
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	2201      	movs	r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 f843 	bl	8001438 <HAL_GPIO_WritePin>
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <Stop_Motor>:

/**
 * @brief Stop the actuator motor
 */
void Stop_Motor(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    /* Disable both sides */
    HAL_GPIO_WritePin(R_EN_GPIO_Port, R_EN_Pin, GPIO_PIN_RESET);
 80003bc:	2390      	movs	r3, #144	@ 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	2200      	movs	r2, #0
 80003c2:	2102      	movs	r1, #2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f837 	bl	8001438 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(L_EN_GPIO_Port, L_EN_Pin, GPIO_PIN_RESET);
 80003ca:	2390      	movs	r3, #144	@ 0x90
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2200      	movs	r2, #0
 80003d0:	2108      	movs	r1, #8
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 f830 	bl	8001438 <HAL_GPIO_WritePin>

    /* Set PWM to zero (optional, already stopped by disable) */
    //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
    HAL_GPIO_WritePin(R_PWM_GPIO_Port, R_PWM_Pin, GPIO_PIN_RESET);
 80003d8:	2390      	movs	r3, #144	@ 0x90
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 f829 	bl	8001438 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(L_PWM_GPIO_Port, L_PWM_Pin, GPIO_PIN_RESET);
 80003e6:	2390      	movs	r3, #144	@ 0x90
 80003e8:	05db      	lsls	r3, r3, #23
 80003ea:	2200      	movs	r2, #0
 80003ec:	2110      	movs	r1, #16
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f822 	bl	8001438 <HAL_GPIO_WritePin>
}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <Receiver_Interrupt>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Receiver_Interrupt()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	nrf24l01p_rx_receive(rx_data);
 8000402:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <Receiver_Interrupt+0x74>)
 8000404:	0018      	movs	r0, r3
 8000406:	f000 f9e3 	bl	80007d0 <nrf24l01p_rx_receive>
	rx_data[NRF24L01P_PAYLOAD_LENGTH - 1] = '\0';
 800040a:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <Receiver_Interrupt+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	77da      	strb	r2, [r3, #31]
	char* message = (char*)rx_data;
 8000410:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <Receiver_Interrupt+0x74>)
 8000412:	607b      	str	r3, [r7, #4]

	if(!motor_moving)
 8000414:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <Receiver_Interrupt+0x78>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d124      	bne.n	8000466 <Receiver_Interrupt+0x6a>
	{
	// if message contains "open", pending_door_status = open, message contains "closed", pending_door_status=closed
		if (strstr(message, "open") != NULL && door_status != Open) {
 800041c:	4a16      	ldr	r2, [pc, #88]	@ (8000478 <Receiver_Interrupt+0x7c>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f002 fc56 	bl	8002cd4 <strstr>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d00a      	beq.n	8000442 <Receiver_Interrupt+0x46>
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <Receiver_Interrupt+0x80>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d006      	beq.n	8000442 <Receiver_Interrupt+0x46>
			pending_door_status = Open;
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <Receiver_Interrupt+0x84>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
			command_pending = 1;
 800043a:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <Receiver_Interrupt+0x88>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
		} else if (strstr(message, "closed") != NULL && door_status != Closed) {
			pending_door_status = Closed;
			command_pending = 1;
		}
	}
}
 8000440:	e011      	b.n	8000466 <Receiver_Interrupt+0x6a>
		} else if (strstr(message, "closed") != NULL && door_status != Closed) {
 8000442:	4a11      	ldr	r2, [pc, #68]	@ (8000488 <Receiver_Interrupt+0x8c>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f002 fc43 	bl	8002cd4 <strstr>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d009      	beq.n	8000466 <Receiver_Interrupt+0x6a>
 8000452:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <Receiver_Interrupt+0x80>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d005      	beq.n	8000466 <Receiver_Interrupt+0x6a>
			pending_door_status = Closed;
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <Receiver_Interrupt+0x84>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
			command_pending = 1;
 8000460:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <Receiver_Interrupt+0x88>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	2000002c 	.word	0x2000002c
 8000474:	2000004c 	.word	0x2000004c
 8000478:	08002d60 	.word	0x08002d60
 800047c:	20000028 	.word	0x20000028
 8000480:	20000029 	.word	0x20000029
 8000484:	2000004d 	.word	0x2000004d
 8000488:	08002d68 	.word	0x08002d68

0800048c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	1dbb      	adds	r3, r7, #6
 8000496:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == RF_IRQ_Pin)
 8000498:	1dbb      	adds	r3, r7, #6
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d101      	bne.n	80004a4 <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Your code when RF_IRQ (PB1) interrupt happens
    	Receiver_Interrupt();
 80004a0:	f7ff ffac 	bl	80003fc <Receiver_Interrupt>
    }
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}

080004ac <Open_Coop_Door>:

void Open_Coop_Door()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	 // if we get an interrupt during this period, we want to ignore it
	Move_Backward();
 80004b0:	f7ff ff61 	bl	8000376 <Move_Backward>
	HAL_Delay(21000);
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <Open_Coop_Door+0x20>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fd54 	bl	8000f64 <HAL_Delay>
	Stop_Motor();
 80004bc:	f7ff ff7c 	bl	80003b8 <Stop_Motor>
	HAL_Delay(10);
 80004c0:	200a      	movs	r0, #10
 80004c2:	f000 fd4f 	bl	8000f64 <HAL_Delay>
}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	00005208 	.word	0x00005208

080004d0 <Close_Coop_Door>:

void Close_Coop_Door()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	Move_Forward();
 80004d4:	f7ff ff2e 	bl	8000334 <Move_Forward>
	HAL_Delay(21000); // TODO stop here in the middle to avoid decapitations
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <Close_Coop_Door+0x20>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fd42 	bl	8000f64 <HAL_Delay>
	Stop_Motor();
 80004e0:	f7ff ff6a 	bl	80003b8 <Stop_Motor>
	HAL_Delay(10);
 80004e4:	200a      	movs	r0, #10
 80004e6:	f000 fd3d 	bl	8000f64 <HAL_Delay>
}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	00005208 	.word	0x00005208

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fccf 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f851 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f7ff fe8d 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000506:	f000 fbb1 	bl	8000c6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	door_status = Not_Init;
 800050a:	4b22      	ldr	r3, [pc, #136]	@ (8000594 <main+0xa0>)
 800050c:	2202      	movs	r2, #2
 800050e:	701a      	strb	r2, [r3, #0]
	pending_door_status = Open;
 8000510:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <main+0xa4>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]

	nrf24l01p_rx_init(2576, _1Mbps);
 8000516:	23a1      	movs	r3, #161	@ 0xa1
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	2100      	movs	r1, #0
 800051c:	0018      	movs	r0, r3
 800051e:	f000 f925 	bl	800076c <nrf24l01p_rx_init>
	HAL_Delay(1000);
 8000522:	23fa      	movs	r3, #250	@ 0xfa
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fd1c 	bl	8000f64 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	uint8_t status = nrf24l01p_get_status();
 800052c:	1dfc      	adds	r4, r7, #7
 800052e:	f000 fa2f 	bl	8000990 <nrf24l01p_get_status>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]
		  {
			  Close_Coop_Door();
			  door_status = Closed;
		  }
		}*/
		if(command_pending && !motor_moving)
 8000536:	4b19      	ldr	r3, [pc, #100]	@ (800059c <main+0xa8>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d028      	beq.n	8000590 <main+0x9c>
 800053e:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <main+0xac>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d124      	bne.n	8000590 <main+0x9c>
		{
			if(pending_door_status == Open)
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <main+0xa4>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10e      	bne.n	800056c <main+0x78>
			{
				motor_moving = 1;
 800054e:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <main+0xac>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
				command_pending = 0;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <main+0xa8>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
				Open_Coop_Door();
 800055a:	f7ff ffa7 	bl	80004ac <Open_Coop_Door>
				door_status = Open;
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <main+0xa0>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
				motor_moving = 0;
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <main+0xac>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	e011      	b.n	8000590 <main+0x9c>
			}
			else if(pending_door_status == Closed)
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <main+0xa4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10d      	bne.n	8000590 <main+0x9c>
			{
				motor_moving = 1;
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <main+0xac>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
				command_pending =  0;
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <main+0xa8>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
				Close_Coop_Door();
 8000580:	f7ff ffa6 	bl	80004d0 <Close_Coop_Door>
				door_status = Closed;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <main+0xa0>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
				motor_moving = 0;
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <main+0xac>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			}
		}

		__WFI();
 8000590:	bf30      	wfi
		if(command_pending && !motor_moving)
 8000592:	e7d0      	b.n	8000536 <main+0x42>
 8000594:	20000028 	.word	0x20000028
 8000598:	20000029 	.word	0x20000029
 800059c:	2000004d 	.word	0x2000004d
 80005a0:	2000004c 	.word	0x2000004c

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b093      	sub	sp, #76	@ 0x4c
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	2414      	movs	r4, #20
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2334      	movs	r3, #52	@ 0x34
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f002 fb85 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	0018      	movs	r0, r3
 80005be:	2310      	movs	r3, #16
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 fb7e 	bl	8002cc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005c8:	0021      	movs	r1, r4
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2220      	movs	r2, #32
 80005ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	22c0      	movs	r2, #192	@ 0xc0
 80005e0:	0252      	lsls	r2, r2, #9
 80005e2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV3;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2202      	movs	r2, #2
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 ff74 	bl	80014e0 <HAL_RCC_OscConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005fc:	f000 f819 	bl	8000632 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2207      	movs	r2, #7
 8000604:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2202      	movs	r2, #2
 800060a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2290      	movs	r2, #144	@ 0x90
 8000610:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2101      	movs	r1, #1
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fae5 	bl	8001bec <HAL_RCC_ClockConfig>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000626:	f000 f804 	bl	8000632 <Error_Handler>
  }
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b013      	add	sp, #76	@ 0x4c
 8000630:	bd90      	pop	{r4, r7, pc}

08000632 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000636:	b672      	cpsid	i
}
 8000638:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	e7fd      	b.n	800063a <Error_Handler+0x8>
	...

08000640 <cs_high>:
#include "nrf24l01p.h"

uint8_t rf_address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};

static void cs_high()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <cs_high+0x18>)
 8000646:	2201      	movs	r2, #1
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fef4 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	48000400 	.word	0x48000400

0800065c <cs_low>:

static void cs_low()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <cs_low+0x18>)
 8000662:	2200      	movs	r2, #0
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fee6 	bl	8001438 <HAL_GPIO_WritePin>
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	48000400 	.word	0x48000400

08000678 <ce_high>:

static void ce_high()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <ce_high+0x18>)
 800067e:	2201      	movs	r2, #1
 8000680:	2140      	movs	r1, #64	@ 0x40
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fed8 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	48000400 	.word	0x48000400

08000694 <ce_low>:

static void ce_low()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <ce_low+0x18>)
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	@ 0x40
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 feca 	bl	8001438 <HAL_GPIO_WritePin>
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	48000400 	.word	0x48000400

080006b0 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	0002      	movs	r2, r0
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	701a      	strb	r2, [r3, #0]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80006bc:	240f      	movs	r4, #15
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	1dfa      	adds	r2, r7, #7
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	701a      	strb	r2, [r3, #0]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80006c6:	f7ff ffc9 	bl	800065c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80006ca:	230e      	movs	r3, #14
 80006cc:	18fa      	adds	r2, r7, r3
 80006ce:	1939      	adds	r1, r7, r4
 80006d0:	480b      	ldr	r0, [pc, #44]	@ (8000700 <read_register+0x50>)
 80006d2:	23fa      	movs	r3, #250	@ 0xfa
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2301      	movs	r3, #1
 80006da:	f001 ff3d 	bl	8002558 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80006de:	23fa      	movs	r3, #250	@ 0xfa
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	240d      	movs	r4, #13
 80006e4:	1939      	adds	r1, r7, r4
 80006e6:	4806      	ldr	r0, [pc, #24]	@ (8000700 <read_register+0x50>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	f001 fde3 	bl	80022b4 <HAL_SPI_Receive>
    cs_high();
 80006ee:	f7ff ffa7 	bl	8000640 <cs_high>

    return read_val;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	781b      	ldrb	r3, [r3, #0]
}
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b005      	add	sp, #20
 80006fc:	bd90      	pop	{r4, r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	20000050 	.word	0x20000050

08000704 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af02      	add	r7, sp, #8
 800070a:	0002      	movs	r2, r0
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	1c0a      	adds	r2, r1, #0
 8000714:	701a      	strb	r2, [r3, #0]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2220      	movs	r2, #32
 800071c:	4313      	orrs	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	250f      	movs	r5, #15
 8000722:	197b      	adds	r3, r7, r5
 8000724:	701a      	strb	r2, [r3, #0]
    uint8_t status;
    uint8_t write_val = value;
 8000726:	240d      	movs	r4, #13
 8000728:	193b      	adds	r3, r7, r4
 800072a:	1dba      	adds	r2, r7, #6
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	701a      	strb	r2, [r3, #0]

    cs_low();
 8000730:	f7ff ff94 	bl	800065c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000734:	230e      	movs	r3, #14
 8000736:	18fa      	adds	r2, r7, r3
 8000738:	1979      	adds	r1, r7, r5
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <write_register+0x64>)
 800073c:	23fa      	movs	r3, #250	@ 0xfa
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2301      	movs	r3, #1
 8000744:	f001 ff08 	bl	8002558 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000748:	23fa      	movs	r3, #250	@ 0xfa
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	1939      	adds	r1, r7, r4
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <write_register+0x64>)
 8000750:	2201      	movs	r2, #1
 8000752:	f001 fc4f 	bl	8001ff4 <HAL_SPI_Transmit>
    cs_high();
 8000756:	f7ff ff73 	bl	8000640 <cs_high>

    return write_val;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	781b      	ldrb	r3, [r3, #0]
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b004      	add	sp, #16
 8000764:	bdb0      	pop	{r4, r5, r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	20000050 	.word	0x20000050

0800076c <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	0002      	movs	r2, r0
 8000774:	1dbb      	adds	r3, r7, #6
 8000776:	801a      	strh	r2, [r3, #0]
 8000778:	1d7b      	adds	r3, r7, #5
 800077a:	1c0a      	adds	r2, r1, #0
 800077c:	701a      	strb	r2, [r3, #0]
    nrf24l01p_reset();
 800077e:	f000 f83f 	bl	8000800 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8000782:	f000 f892 	bl	80008aa <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000786:	f000 f947 	bl	8000a18 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 800078a:	2020      	movs	r0, #32
 800078c:	f000 f91c 	bl	80009c8 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000790:	1dbb      	adds	r3, r7, #6
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	0018      	movs	r0, r3
 8000796:	f000 f9f1 	bl	8000b7c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 800079a:	1d7b      	adds	r3, r7, #5
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fa2f 	bl	8000c02 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 fa05 	bl	8000bb4 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 f94d 	bl	8000a4a <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 80007b0:	2005      	movs	r0, #5
 80007b2:	f000 f979 	bl	8000aa8 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 80007b6:	2003      	movs	r0, #3
 80007b8:	f000 f988 	bl	8000acc <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 80007bc:	20fa      	movs	r0, #250	@ 0xfa
 80007be:	f000 f9ab 	bl	8000b18 <nrf24l01p_auto_retransmit_delay>
    
    //nrf24l01p_set_rx_address(rf_address);  // <- ADD THIS
    //nrf24l01p_set_tx_address(rf_address);

    ce_high();
 80007c2:	f7ff ff59 	bl	8000678 <ce_high>
}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 f87e 	bl	80008dc <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 80007e0:	f000 f902 	bl	80009e8 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007e4:	2380      	movs	r3, #128	@ 0x80
 80007e6:	019b      	lsls	r3, r3, #6
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <nrf24l01p_rx_receive+0x2c>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f000 fe40 	bl	8001472 <HAL_GPIO_TogglePin>
}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	48000800 	.word	0x48000800

08000800 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000804:	f7ff ff1c 	bl	8000640 <cs_high>
    ce_low();
 8000808:	f7ff ff44 	bl	8000694 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 800080c:	2108      	movs	r1, #8
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff ff78 	bl	8000704 <write_register>
    //write_register(NRF24L01P_REG_CONFIG, 0x0B); // unmask IRQ
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000814:	213f      	movs	r1, #63	@ 0x3f
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ff74 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800081c:	2103      	movs	r1, #3
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff ff70 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000824:	2103      	movs	r1, #3
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ff6c 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800082c:	2103      	movs	r1, #3
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff ff68 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000834:	2102      	movs	r1, #2
 8000836:	2005      	movs	r0, #5
 8000838:	f7ff ff64 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800083c:	2107      	movs	r1, #7
 800083e:	2006      	movs	r0, #6
 8000840:	f7ff ff60 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000844:	217e      	movs	r1, #126	@ 0x7e
 8000846:	2007      	movs	r0, #7
 8000848:	f7ff ff5c 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800084c:	2100      	movs	r1, #0
 800084e:	2011      	movs	r0, #17
 8000850:	f7ff ff58 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000854:	2100      	movs	r1, #0
 8000856:	2011      	movs	r0, #17
 8000858:	f7ff ff54 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 800085c:	2100      	movs	r1, #0
 800085e:	2012      	movs	r0, #18
 8000860:	f7ff ff50 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000864:	2100      	movs	r1, #0
 8000866:	2013      	movs	r0, #19
 8000868:	f7ff ff4c 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800086c:	2100      	movs	r1, #0
 800086e:	2014      	movs	r0, #20
 8000870:	f7ff ff48 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000874:	2100      	movs	r1, #0
 8000876:	2015      	movs	r0, #21
 8000878:	f7ff ff44 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 800087c:	2100      	movs	r1, #0
 800087e:	2016      	movs	r0, #22
 8000880:	f7ff ff40 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000884:	2111      	movs	r1, #17
 8000886:	2017      	movs	r0, #23
 8000888:	f7ff ff3c 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 800088c:	2100      	movs	r1, #0
 800088e:	201c      	movs	r0, #28
 8000890:	f7ff ff38 	bl	8000704 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000894:	2100      	movs	r1, #0
 8000896:	201d      	movs	r0, #29
 8000898:	f7ff ff34 	bl	8000704 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 800089c:	f000 f844 	bl	8000928 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80008a0:	f000 f85c 	bl	800095c <nrf24l01p_flush_tx_fifo>
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 80008aa:	b590      	push	{r4, r7, lr}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80008b0:	1dfc      	adds	r4, r7, #7
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fefc 	bl	80006b0 <read_register>
 80008b8:	0003      	movs	r3, r0
 80008ba:	7023      	strb	r3, [r4, #0]
    new_config |= 1 << 0;
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	1dfa      	adds	r2, r7, #7
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	0019      	movs	r1, r3
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff ff18 	bl	8000704 <write_register>
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b003      	add	sp, #12
 80008da:	bd90      	pop	{r4, r7, pc}

080008dc <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 80008e4:	240f      	movs	r4, #15
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2261      	movs	r2, #97	@ 0x61
 80008ea:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 80008ec:	f7ff feb6 	bl	800065c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80008f0:	250e      	movs	r5, #14
 80008f2:	197a      	adds	r2, r7, r5
 80008f4:	1939      	adds	r1, r7, r4
 80008f6:	480b      	ldr	r0, [pc, #44]	@ (8000924 <nrf24l01p_read_rx_fifo+0x48>)
 80008f8:	23fa      	movs	r3, #250	@ 0xfa
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2301      	movs	r3, #1
 8000900:	f001 fe2a 	bl	8002558 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000904:	23fa      	movs	r3, #250	@ 0xfa
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <nrf24l01p_read_rx_fifo+0x48>)
 800090c:	2220      	movs	r2, #32
 800090e:	f001 fcd1 	bl	80022b4 <HAL_SPI_Receive>
    cs_high();
 8000912:	f7ff fe95 	bl	8000640 <cs_high>

    return status;
 8000916:	197b      	adds	r3, r7, r5
 8000918:	781b      	ldrb	r3, [r3, #0]
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bdb0      	pop	{r4, r5, r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	20000050 	.word	0x20000050

08000928 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	22e2      	movs	r2, #226	@ 0xe2
 8000932:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 8000934:	f7ff fe92 	bl	800065c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000938:	1dba      	adds	r2, r7, #6
 800093a:	1df9      	adds	r1, r7, #7
 800093c:	4806      	ldr	r0, [pc, #24]	@ (8000958 <nrf24l01p_flush_rx_fifo+0x30>)
 800093e:	23fa      	movs	r3, #250	@ 0xfa
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	f001 fe07 	bl	8002558 <HAL_SPI_TransmitReceive>
    cs_high();
 800094a:	f7ff fe79 	bl	8000640 <cs_high>
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	20000050 	.word	0x20000050

0800095c <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	22e1      	movs	r2, #225	@ 0xe1
 8000966:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 8000968:	f7ff fe78 	bl	800065c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800096c:	1dba      	adds	r2, r7, #6
 800096e:	1df9      	adds	r1, r7, #7
 8000970:	4806      	ldr	r0, [pc, #24]	@ (800098c <nrf24l01p_flush_tx_fifo+0x30>)
 8000972:	23fa      	movs	r3, #250	@ 0xfa
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2301      	movs	r3, #1
 800097a:	f001 fded 	bl	8002558 <HAL_SPI_TransmitReceive>
    cs_high();
 800097e:	f7ff fe5f 	bl	8000640 <cs_high>
}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	20000050 	.word	0x20000050

08000990 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	22ff      	movs	r2, #255	@ 0xff
 800099a:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 800099c:	f7ff fe5e 	bl	800065c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80009a0:	1dba      	adds	r2, r7, #6
 80009a2:	1df9      	adds	r1, r7, #7
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <nrf24l01p_get_status+0x34>)
 80009a6:	23fa      	movs	r3, #250	@ 0xfa
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	f001 fdd3 	bl	8002558 <HAL_SPI_TransmitReceive>
    cs_high(); 
 80009b2:	f7ff fe45 	bl	8000640 <cs_high>

    return status;
 80009b6:	1dbb      	adds	r3, r7, #6
 80009b8:	781b      	ldrb	r3, [r3, #0]
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	20000050 	.word	0x20000050

080009c8 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0002      	movs	r2, r0
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	701a      	strb	r2, [r3, #0]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	0019      	movs	r1, r3
 80009da:	2011      	movs	r0, #17
 80009dc:	f7ff fe92 	bl	8000704 <write_register>
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80009ee:	1dfc      	adds	r4, r7, #7
 80009f0:	f7ff ffce 	bl	8000990 <nrf24l01p_get_status>
 80009f4:	0003      	movs	r3, r0
 80009f6:	7023      	strb	r3, [r4, #0]
    new_status |= 0x40;
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	1dfa      	adds	r2, r7, #7
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	2140      	movs	r1, #64	@ 0x40
 8000a00:	430a      	orrs	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0019      	movs	r1, r3
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f7ff fe7a 	bl	8000704 <write_register>
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b003      	add	sp, #12
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000a1e:	1dfc      	adds	r4, r7, #7
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe45 	bl	80006b0 <read_register>
 8000a26:	0003      	movs	r3, r0
 8000a28:	7023      	strb	r3, [r4, #0]
    new_config |= 1 << 1;
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	1dfa      	adds	r2, r7, #7
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	2102      	movs	r1, #2
 8000a32:	430a      	orrs	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fe61 	bl	8000704 <write_register>
}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b003      	add	sp, #12
 8000a48:	bd90      	pop	{r4, r7, pc}

08000a4a <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000a4a:	b590      	push	{r4, r7, lr}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	0002      	movs	r2, r0
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	701a      	strb	r2, [r3, #0]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000a56:	230f      	movs	r3, #15
 8000a58:	18fc      	adds	r4, r7, r3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fe28 	bl	80006b0 <read_register>
 8000a60:	0003      	movs	r3, r0
 8000a62:	7023      	strb	r3, [r4, #0]
    
    switch(bytes)
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d002      	beq.n	8000a72 <nrf24l01p_set_crc_length+0x28>
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d008      	beq.n	8000a82 <nrf24l01p_set_crc_length+0x38>
 8000a70:	e00f      	b.n	8000a92 <nrf24l01p_set_crc_length+0x48>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000a72:	220f      	movs	r2, #15
 8000a74:	18bb      	adds	r3, r7, r2
 8000a76:	18ba      	adds	r2, r7, r2
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	438a      	bics	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]
            break;
 8000a80:	e007      	b.n	8000a92 <nrf24l01p_set_crc_length+0x48>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000a82:	220f      	movs	r2, #15
 8000a84:	18bb      	adds	r3, r7, r2
 8000a86:	18ba      	adds	r2, r7, r2
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	701a      	strb	r2, [r3, #0]
            break;
 8000a90:	46c0      	nop			@ (mov r8, r8)
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000a92:	230f      	movs	r3, #15
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	0019      	movs	r1, r3
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fe32 	bl	8000704 <write_register>
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b005      	add	sp, #20
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	0002      	movs	r2, r0
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	701a      	strb	r2, [r3, #0]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	0019      	movs	r1, r3
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f7ff fe20 	bl	8000704 <write_register>
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	701a      	strb	r2, [r3, #0]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000ad8:	250f      	movs	r5, #15
 8000ada:	197c      	adds	r4, r7, r5
 8000adc:	2004      	movs	r0, #4
 8000ade:	f7ff fde7 	bl	80006b0 <read_register>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	7023      	strb	r3, [r4, #0]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	183b      	adds	r3, r7, r0
 8000aea:	183a      	adds	r2, r7, r0
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	2110      	movs	r1, #16
 8000af0:	4249      	negs	r1, r1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
    new_setup_retr |= cnt;
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	1839      	adds	r1, r7, r0
 8000afa:	1dfa      	adds	r2, r7, #7
 8000afc:	7809      	ldrb	r1, [r1, #0]
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	701a      	strb	r2, [r3, #0]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000b04:	183b      	adds	r3, r7, r0
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0019      	movs	r1, r3
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f7ff fdfa 	bl	8000704 <write_register>
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bdb0      	pop	{r4, r5, r7, pc}

08000b18 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	801a      	strh	r2, [r3, #0]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000b24:	250f      	movs	r5, #15
 8000b26:	197c      	adds	r4, r7, r5
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fdc1 	bl	80006b0 <read_register>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	7023      	strb	r3, [r4, #0]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000b32:	002c      	movs	r4, r5
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	193a      	adds	r2, r7, r4
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	701a      	strb	r2, [r3, #0]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	21fa      	movs	r1, #250	@ 0xfa
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fade 	bl	8000108 <__udivsi3>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3b01      	subs	r3, #1
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	b25a      	sxtb	r2, r3
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	701a      	strb	r2, [r3, #0]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	2004      	movs	r0, #4
 8000b6e:	f7ff fdc9 	bl	8000704 <write_register>
}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b7c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	0002      	movs	r2, r0
 8000b84:	1dbb      	adds	r3, r7, #6
 8000b86:	801a      	strh	r2, [r3, #0]
	uint16_t new_rf_ch = MHz - 2400;
 8000b88:	210e      	movs	r1, #14
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	1dba      	adds	r2, r7, #6
 8000b8e:	8812      	ldrh	r2, [r2, #0]
 8000b90:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <nrf24l01p_set_rf_channel+0x34>)
 8000b92:	4684      	mov	ip, r0
 8000b94:	4462      	add	r2, ip
 8000b96:	801a      	strh	r2, [r3, #0]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	2005      	movs	r0, #5
 8000ba2:	f7ff fdaf 	bl	8000704 <write_register>
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	fffff6a0 	.word	0xfffff6a0

08000bb4 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000bc0:	2006      	movs	r0, #6
 8000bc2:	f7ff fd75 	bl	80006b0 <read_register>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	200f      	movs	r0, #15
 8000bcc:	183b      	adds	r3, r7, r0
 8000bce:	2206      	movs	r2, #6
 8000bd0:	4391      	bics	r1, r2
 8000bd2:	000a      	movs	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
    new_rf_setup |= (dBm << 1);
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	18db      	adds	r3, r3, r3
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	183b      	adds	r3, r7, r0
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b25a      	sxtb	r2, r3
 8000bea:	183b      	adds	r3, r7, r0
 8000bec:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000bee:	183b      	adds	r3, r7, r0
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f7ff fd85 	bl	8000704 <write_register>
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	0002      	movs	r2, r0
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	701a      	strb	r2, [r3, #0]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000c0e:	2006      	movs	r0, #6
 8000c10:	f7ff fd4e 	bl	80006b0 <read_register>
 8000c14:	0003      	movs	r3, r0
 8000c16:	0019      	movs	r1, r3
 8000c18:	200f      	movs	r0, #15
 8000c1a:	183b      	adds	r3, r7, r0
 8000c1c:	2228      	movs	r2, #40	@ 0x28
 8000c1e:	4391      	bics	r1, r2
 8000c20:	000a      	movs	r2, r1
 8000c22:	701a      	strb	r2, [r3, #0]
    
    switch(bps)
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d00b      	beq.n	8000c44 <nrf24l01p_set_rf_air_data_rate+0x42>
 8000c2c:	dc13      	bgt.n	8000c56 <nrf24l01p_set_rf_air_data_rate+0x54>
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d010      	beq.n	8000c54 <nrf24l01p_set_rf_air_data_rate+0x52>
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d10f      	bne.n	8000c56 <nrf24l01p_set_rf_air_data_rate+0x54>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000c36:	183b      	adds	r3, r7, r0
 8000c38:	183a      	adds	r2, r7, r0
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
            break;
 8000c42:	e008      	b.n	8000c56 <nrf24l01p_set_rf_air_data_rate+0x54>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000c44:	220f      	movs	r2, #15
 8000c46:	18bb      	adds	r3, r7, r2
 8000c48:	18ba      	adds	r2, r7, r2
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
            break;
 8000c52:	e000      	b.n	8000c56 <nrf24l01p_set_rf_air_data_rate+0x54>
            break;
 8000c54:	46c0      	nop			@ (mov r8, r8)
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f7ff fd50 	bl	8000704 <write_register>
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b004      	add	sp, #16
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <MX_SPI1_Init+0x78>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000c78:	2282      	movs	r2, #130	@ 0x82
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000c86:	22e0      	movs	r2, #224	@ 0xe0
 8000c88:	00d2      	lsls	r2, r2, #3
 8000c8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000c9a:	2280      	movs	r2, #128	@ 0x80
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000cba:	2207      	movs	r2, #7
 8000cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cca:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <MX_SPI1_Init+0x74>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f001 f8d9 	bl	8001e84 <HAL_SPI_Init>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f7ff fcac 	bl	8000632 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000050 	.word	0x20000050
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b08b      	sub	sp, #44	@ 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	2414      	movs	r4, #20
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2314      	movs	r3, #20
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f001 ffe2 	bl	8002cc4 <memset>
  if(spiHandle->Instance==SPI1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <HAL_SPI_MspInit+0x90>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d131      	bne.n	8000d6e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d0c:	699a      	ldr	r2, [r3, #24]
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0149      	lsls	r1, r1, #5
 8000d14:	430a      	orrs	r2, r1
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	2380      	movs	r3, #128	@ 0x80
 8000d1e:	015b      	lsls	r3, r3, #5
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d28:	695a      	ldr	r2, [r3, #20]
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d2c:	2180      	movs	r1, #128	@ 0x80
 8000d2e:	02c9      	lsls	r1, r1, #11
 8000d30:	430a      	orrs	r2, r1
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	2380      	movs	r3, #128	@ 0x80
 8000d3a:	02db      	lsls	r3, r3, #11
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d42:	0021      	movs	r1, r4
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2238      	movs	r2, #56	@ 0x38
 8000d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	4a06      	ldr	r2, [pc, #24]	@ (8000d80 <HAL_SPI_MspInit+0x98>)
 8000d66:	0019      	movs	r1, r3
 8000d68:	0010      	movs	r0, r2
 8000d6a:	f000 f9fd 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b00b      	add	sp, #44	@ 0x2c
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000400 	.word	0x48000400

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	619a      	str	r2, [r3, #24]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	69da      	ldr	r2, [r3, #28]
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	0549      	lsls	r1, r1, #21
 8000dac:	430a      	orrs	r2, r1
 8000dae:	61da      	str	r2, [r3, #28]
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	055b      	lsls	r3, r3, #21
 8000db8:	4013      	ands	r3, r2
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f89a 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_IRQ_Pin);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f000 fb50 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e18:	4813      	ldr	r0, [pc, #76]	@ (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff fff7 	bl	8000e0e <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000e20:	4812      	ldr	r0, [pc, #72]	@ (8000e6c <LoopForever+0x6>)
    LDR R1, [R0]
 8000e22:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e24:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e26:	4a12      	ldr	r2, [pc, #72]	@ (8000e70 <LoopForever+0xa>)
    CMP R1, R2
 8000e28:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e2a:	d105      	bne.n	8000e38 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000e2c:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e2e:	4912      	ldr	r1, [pc, #72]	@ (8000e78 <LoopForever+0x12>)
    STR R1, [R0]
 8000e30:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e32:	4812      	ldr	r0, [pc, #72]	@ (8000e7c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e34:	4912      	ldr	r1, [pc, #72]	@ (8000e80 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e36:	6001      	str	r1, [r0, #0]

08000e38 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	4812      	ldr	r0, [pc, #72]	@ (8000e84 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e3a:	4913      	ldr	r1, [pc, #76]	@ (8000e88 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e3c:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <LoopForever+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e50:	4c10      	ldr	r4, [pc, #64]	@ (8000e94 <LoopForever+0x2e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f001 ff4f 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fb47 	bl	80004f4 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000e6c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e70:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000e74:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e78:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e7c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e80:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e8c:	08002da8 	.word	0x08002da8
  ldr r2, =_sbss
 8000e90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e94:	200000b8 	.word	0x200000b8

08000e98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_IRQHandler>
	...

08000e9c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <HAL_Init+0x24>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_Init+0x24>)
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 f809 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb2:	f7ff ff67 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000ece:	681c      	ldr	r4, [r3, #0]
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <HAL_InitTick+0x60>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	23fa      	movs	r3, #250	@ 0xfa
 8000ed8:	0098      	lsls	r0, r3, #2
 8000eda:	f7ff f915 	bl	8000108 <__udivsi3>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f7ff f910 	bl	8000108 <__udivsi3>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f92f 	bl	800114e <HAL_SYSTICK_Config>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e00f      	b.n	8000f18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d80b      	bhi.n	8000f16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2301      	movs	r3, #1
 8000f02:	425b      	negs	r3, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 f8fc 	bl	8001104 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_InitTick+0x64>)
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	001a      	movs	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_IncTick+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	18d2      	adds	r2, r2, r3
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_IncTick+0x20>)
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200000b4 	.word	0x200000b4

08000f50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	@ (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	200000b4 	.word	0x200000b4

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff0 	bl	8000f50 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	001a      	movs	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	189b      	adds	r3, r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	f7ff ffe0 	bl	8000f50 <HAL_GetTick>
 8000f90:	0002      	movs	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	20000008 	.word	0x20000008

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fbe:	d809      	bhi.n	8000fd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	401a      	ands	r2, r3
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <__NVIC_EnableIRQ+0x30>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4091      	lsls	r1, r2
 8000fd0:	000a      	movs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
  }
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ff4:	d828      	bhi.n	8001048 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <__NVIC_SetPriority+0xd4>)
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	33c0      	adds	r3, #192	@ 0xc0
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	589b      	ldr	r3, [r3, r2]
 8001006:	1dfa      	adds	r2, r7, #7
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	0011      	movs	r1, r2
 800100c:	2203      	movs	r2, #3
 800100e:	400a      	ands	r2, r1
 8001010:	00d2      	lsls	r2, r2, #3
 8001012:	21ff      	movs	r1, #255	@ 0xff
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	43d2      	mvns	r2, r2
 800101a:	401a      	ands	r2, r3
 800101c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	22ff      	movs	r2, #255	@ 0xff
 8001024:	401a      	ands	r2, r3
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0018      	movs	r0, r3
 800102c:	2303      	movs	r3, #3
 800102e:	4003      	ands	r3, r0
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001034:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <__NVIC_SetPriority+0xd4>)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	430a      	orrs	r2, r1
 8001040:	33c0      	adds	r3, #192	@ 0xc0
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001046:	e031      	b.n	80010ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	4a1b      	ldr	r2, [pc, #108]	@ (80010b8 <__NVIC_SetPriority+0xd8>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	0019      	movs	r1, r3
 8001050:	230f      	movs	r3, #15
 8001052:	400b      	ands	r3, r1
 8001054:	3b08      	subs	r3, #8
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3306      	adds	r3, #6
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	3304      	adds	r3, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1dfa      	adds	r2, r7, #7
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	0011      	movs	r1, r2
 8001068:	2203      	movs	r2, #3
 800106a:	400a      	ands	r2, r1
 800106c:	00d2      	lsls	r2, r2, #3
 800106e:	21ff      	movs	r1, #255	@ 0xff
 8001070:	4091      	lsls	r1, r2
 8001072:	000a      	movs	r2, r1
 8001074:	43d2      	mvns	r2, r2
 8001076:	401a      	ands	r2, r3
 8001078:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	019b      	lsls	r3, r3, #6
 800107e:	22ff      	movs	r2, #255	@ 0xff
 8001080:	401a      	ands	r2, r3
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	0018      	movs	r0, r3
 8001088:	2303      	movs	r3, #3
 800108a:	4003      	ands	r3, r0
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001090:	4809      	ldr	r0, [pc, #36]	@ (80010b8 <__NVIC_SetPriority+0xd8>)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	001c      	movs	r4, r3
 8001098:	230f      	movs	r3, #15
 800109a:	4023      	ands	r3, r4
 800109c:	3b08      	subs	r3, #8
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	430a      	orrs	r2, r1
 80010a2:	3306      	adds	r3, #6
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	18c3      	adds	r3, r0, r3
 80010a8:	3304      	adds	r3, #4
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b003      	add	sp, #12
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	045b      	lsls	r3, r3, #17
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d301      	bcc.n	80010d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d0:	2301      	movs	r3, #1
 80010d2:	e010      	b.n	80010f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <SysTick_Config+0x44>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	3a01      	subs	r2, #1
 80010da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010dc:	2301      	movs	r3, #1
 80010de:	425b      	negs	r3, r3
 80010e0:	2103      	movs	r1, #3
 80010e2:	0018      	movs	r0, r3
 80010e4:	f7ff ff7c 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <SysTick_Config+0x44>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <SysTick_Config+0x44>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	210f      	movs	r1, #15
 8001110:	187b      	adds	r3, r7, r1
 8001112:	1c02      	adds	r2, r0, #0
 8001114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	0002      	movs	r2, r0
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ff33 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff ffaf 	bl	80010bc <SysTick_Config>
 800115e:	0003      	movs	r3, r0
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001176:	e149      	b.n	800140c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4091      	lsls	r1, r2
 8001182:	000a      	movs	r2, r1
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d100      	bne.n	8001190 <HAL_GPIO_Init+0x28>
 800118e:	e13a      	b.n	8001406 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2203      	movs	r2, #3
 8001196:	4013      	ands	r3, r2
 8001198:	2b01      	cmp	r3, #1
 800119a:	d005      	beq.n	80011a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d130      	bne.n	800120a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	409a      	lsls	r2, r3
 80011b6:	0013      	movs	r3, r2
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	409a      	lsls	r2, r3
 80011ca:	0013      	movs	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011de:	2201      	movs	r2, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	2201      	movs	r2, #1
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	4013      	ands	r3, r2
 8001212:	2b03      	cmp	r3, #3
 8001214:	d017      	beq.n	8001246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	4013      	ands	r3, r2
 800124e:	2b02      	cmp	r3, #2
 8001250:	d123      	bne.n	800129a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	58d3      	ldr	r3, [r2, r3]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2207      	movs	r2, #7
 8001264:	4013      	ands	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2107      	movs	r1, #7
 800127e:	400b      	ands	r3, r1
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	43da      	mvns	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	401a      	ands	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	23c0      	movs	r3, #192	@ 0xc0
 80012d4:	029b      	lsls	r3, r3, #10
 80012d6:	4013      	ands	r3, r2
 80012d8:	d100      	bne.n	80012dc <HAL_GPIO_Init+0x174>
 80012da:	e094      	b.n	8001406 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b51      	ldr	r3, [pc, #324]	@ (8001424 <HAL_GPIO_Init+0x2bc>)
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	4b50      	ldr	r3, [pc, #320]	@ (8001424 <HAL_GPIO_Init+0x2bc>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	430a      	orrs	r2, r1
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001424 <HAL_GPIO_Init+0x2bc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001428 <HAL_GPIO_Init+0x2c0>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	589b      	ldr	r3, [r3, r2]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2203      	movs	r2, #3
 8001306:	4013      	ands	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	2390      	movs	r3, #144	@ 0x90
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	429a      	cmp	r2, r3
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x1d6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a41      	ldr	r2, [pc, #260]	@ (800142c <HAL_GPIO_Init+0x2c4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x1d2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a40      	ldr	r2, [pc, #256]	@ (8001430 <HAL_GPIO_Init+0x2c8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x1ce>
 8001332:	2302      	movs	r3, #2
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x1d8>
 8001336:	2305      	movs	r3, #5
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x1d8>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x1d8>
 800133e:	2300      	movs	r3, #0
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	2103      	movs	r1, #3
 8001344:	400a      	ands	r2, r1
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x2c0>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b35      	ldr	r3, [pc, #212]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	035b      	lsls	r3, r3, #13
 8001376:	4013      	ands	r3, r2
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	039b      	lsls	r3, r3, #14
 80013a0:	4013      	ands	r3, r2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	4013      	ands	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	40da      	lsrs	r2, r3
 8001414:	1e13      	subs	r3, r2, #0
 8001416:	d000      	beq.n	800141a <HAL_GPIO_Init+0x2b2>
 8001418:	e6ae      	b.n	8001178 <HAL_GPIO_Init+0x10>
  } 
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b006      	add	sp, #24
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	0008      	movs	r0, r1
 8001442:	0011      	movs	r1, r2
 8001444:	1cbb      	adds	r3, r7, #2
 8001446:	1c02      	adds	r2, r0, #0
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	1c7b      	adds	r3, r7, #1
 800144c:	1c0a      	adds	r2, r1, #0
 800144e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001450:	1c7b      	adds	r3, r7, #1
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001458:	1cbb      	adds	r3, r7, #2
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001462:	1cbb      	adds	r3, r7, #2
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	000a      	movs	r2, r1
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	041a      	lsls	r2, r3, #16
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	1cb9      	adds	r1, r7, #2
 8001496:	8809      	ldrh	r1, [r1, #0]
 8001498:	400b      	ands	r3, r1
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b004      	add	sp, #16
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	1dbb      	adds	r3, r7, #6
 80014b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	1dba      	adds	r2, r7, #6
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	4013      	ands	r3, r2
 80014be:	d008      	beq.n	80014d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014c2:	1dba      	adds	r2, r7, #6
 80014c4:	8812      	ldrh	r2, [r2, #0]
 80014c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c8:	1dbb      	adds	r3, r7, #6
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7fe ffdd 	bl	800048c <HAL_GPIO_EXTI_Callback>
  }
}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 fb76 	bl	8001be0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4013      	ands	r3, r2
 80014fc:	d100      	bne.n	8001500 <HAL_RCC_OscConfig+0x20>
 80014fe:	e08e      	b.n	800161e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001500:	4bc5      	ldr	r3, [pc, #788]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	220c      	movs	r2, #12
 8001506:	4013      	ands	r3, r2
 8001508:	2b04      	cmp	r3, #4
 800150a:	d00e      	beq.n	800152a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800150c:	4bc2      	ldr	r3, [pc, #776]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	220c      	movs	r2, #12
 8001512:	4013      	ands	r3, r2
 8001514:	2b08      	cmp	r3, #8
 8001516:	d117      	bne.n	8001548 <HAL_RCC_OscConfig+0x68>
 8001518:	4bbf      	ldr	r3, [pc, #764]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	23c0      	movs	r3, #192	@ 0xc0
 800151e:	025b      	lsls	r3, r3, #9
 8001520:	401a      	ands	r2, r3
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	025b      	lsls	r3, r3, #9
 8001526:	429a      	cmp	r2, r3
 8001528:	d10e      	bne.n	8001548 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152a:	4bbb      	ldr	r3, [pc, #748]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	@ 0x80
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	4013      	ands	r3, r2
 8001534:	d100      	bne.n	8001538 <HAL_RCC_OscConfig+0x58>
 8001536:	e071      	b.n	800161c <HAL_RCC_OscConfig+0x13c>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d000      	beq.n	8001542 <HAL_RCC_OscConfig+0x62>
 8001540:	e06c      	b.n	800161c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	f000 fb4c 	bl	8001be0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x80>
 8001550:	4bb1      	ldr	r3, [pc, #708]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4bb0      	ldr	r3, [pc, #704]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	0249      	lsls	r1, r1, #9
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e02f      	b.n	80015c0 <HAL_RCC_OscConfig+0xe0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10c      	bne.n	8001582 <HAL_RCC_OscConfig+0xa2>
 8001568:	4bab      	ldr	r3, [pc, #684]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4baa      	ldr	r3, [pc, #680]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800156e:	49ab      	ldr	r1, [pc, #684]	@ (800181c <HAL_RCC_OscConfig+0x33c>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	4ba8      	ldr	r3, [pc, #672]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4ba7      	ldr	r3, [pc, #668]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800157a:	49a9      	ldr	r1, [pc, #676]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e01e      	b.n	80015c0 <HAL_RCC_OscConfig+0xe0>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d10e      	bne.n	80015a8 <HAL_RCC_OscConfig+0xc8>
 800158a:	4ba3      	ldr	r3, [pc, #652]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4ba2      	ldr	r3, [pc, #648]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	02c9      	lsls	r1, r1, #11
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	4b9f      	ldr	r3, [pc, #636]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b9e      	ldr	r3, [pc, #632]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	0249      	lsls	r1, r1, #9
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xe0>
 80015a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80015ae:	499b      	ldr	r1, [pc, #620]	@ (800181c <HAL_RCC_OscConfig+0x33c>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	4b98      	ldr	r3, [pc, #608]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b97      	ldr	r3, [pc, #604]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80015ba:	4999      	ldr	r1, [pc, #612]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d014      	beq.n	80015f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fcc2 	bl	8000f50 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d2:	f7ff fcbd 	bl	8000f50 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b64      	cmp	r3, #100	@ 0x64
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e2fd      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	029b      	lsls	r3, r3, #10
 80015ec:	4013      	ands	r3, r2
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0xf2>
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fcad 	bl	8000f50 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fca8 	bl	8000f50 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e2e8      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	029b      	lsls	r3, r3, #10
 8001616:	4013      	ands	r3, r2
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x11c>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x14a>
 8001628:	e06c      	b.n	8001704 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800162a:	4b7b      	ldr	r3, [pc, #492]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	220c      	movs	r2, #12
 8001630:	4013      	ands	r3, r2
 8001632:	d00e      	beq.n	8001652 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001634:	4b78      	ldr	r3, [pc, #480]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	220c      	movs	r2, #12
 800163a:	4013      	ands	r3, r2
 800163c:	2b08      	cmp	r3, #8
 800163e:	d11f      	bne.n	8001680 <HAL_RCC_OscConfig+0x1a0>
 8001640:	4b75      	ldr	r3, [pc, #468]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	23c0      	movs	r3, #192	@ 0xc0
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	401a      	ands	r2, r3
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	429a      	cmp	r2, r3
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b71      	ldr	r3, [pc, #452]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d005      	beq.n	8001668 <HAL_RCC_OscConfig+0x188>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d001      	beq.n	8001668 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2bb      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b6b      	ldr	r3, [pc, #428]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	22f8      	movs	r2, #248	@ 0xf8
 800166e:	4393      	bics	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00da      	lsls	r2, r3, #3
 8001678:	4b67      	ldr	r3, [pc, #412]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e041      	b.n	8001704 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d024      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b62      	ldr	r3, [pc, #392]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc5c 	bl	8000f50 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fc57 	bl	8000f50 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e297      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b59      	ldr	r3, [pc, #356]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f1      	beq.n	800169e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b57      	ldr	r3, [pc, #348]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	22f8      	movs	r2, #248	@ 0xf8
 80016c0:	4393      	bics	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	00da      	lsls	r2, r3, #3
 80016ca:	4b53      	ldr	r3, [pc, #332]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e018      	b.n	8001704 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b50      	ldr	r3, [pc, #320]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80016d8:	2101      	movs	r1, #1
 80016da:	438a      	bics	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fc37 	bl	8000f50 <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fc32 	bl	8000f50 <HAL_GetTick>
 80016ec:	0002      	movs	r2, r0
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e272      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d1f1      	bne.n	80016e8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2208      	movs	r2, #8
 800170a:	4013      	ands	r3, r2
 800170c:	d036      	beq.n	800177c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d019      	beq.n	800174a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001718:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800171a:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800171c:	2101      	movs	r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fc15 	bl	8000f50 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fc10 	bl	8000f50 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e250      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0f1      	beq.n	800172c <HAL_RCC_OscConfig+0x24c>
 8001748:	e018      	b.n	800177c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174a:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800174c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001750:	2101      	movs	r1, #1
 8001752:	438a      	bics	r2, r1
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fbfb 	bl	8000f50 <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fbf6 	bl	8000f50 <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e236      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d1f1      	bne.n	8001760 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2204      	movs	r2, #4
 8001782:	4013      	ands	r3, r2
 8001784:	d100      	bne.n	8001788 <HAL_RCC_OscConfig+0x2a8>
 8001786:	e0b5      	b.n	80018f4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001788:	201f      	movs	r0, #31
 800178a:	183b      	adds	r3, r7, r0
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	055b      	lsls	r3, r3, #21
 8001798:	4013      	ands	r3, r2
 800179a:	d110      	bne.n	80017be <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80017a2:	2180      	movs	r1, #128	@ 0x80
 80017a4:	0549      	lsls	r1, r1, #21
 80017a6:	430a      	orrs	r2, r1
 80017a8:	61da      	str	r2, [r3, #28]
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	055b      	lsls	r3, r3, #21
 80017b2:	4013      	ands	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_RCC_OscConfig+0x344>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d11a      	bne.n	8001800 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_RCC_OscConfig+0x344>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_RCC_OscConfig+0x344>)
 80017d0:	2180      	movs	r1, #128	@ 0x80
 80017d2:	0049      	lsls	r1, r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fbba 	bl	8000f50 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff fbb5 	bl	8000f50 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	@ 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1f5      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_RCC_OscConfig+0x344>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10f      	bne.n	8001828 <HAL_RCC_OscConfig+0x348>
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	4b02      	ldr	r3, [pc, #8]	@ (8001818 <HAL_RCC_OscConfig+0x338>)
 800180e:	2101      	movs	r1, #1
 8001810:	430a      	orrs	r2, r1
 8001812:	621a      	str	r2, [r3, #32]
 8001814:	e036      	b.n	8001884 <HAL_RCC_OscConfig+0x3a4>
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	40021000 	.word	0x40021000
 800181c:	fffeffff 	.word	0xfffeffff
 8001820:	fffbffff 	.word	0xfffbffff
 8001824:	40007000 	.word	0x40007000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10c      	bne.n	800184a <HAL_RCC_OscConfig+0x36a>
 8001830:	4bca      	ldr	r3, [pc, #808]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4bc9      	ldr	r3, [pc, #804]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	4bc7      	ldr	r3, [pc, #796]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800183e:	6a1a      	ldr	r2, [r3, #32]
 8001840:	4bc6      	ldr	r3, [pc, #792]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001842:	2104      	movs	r1, #4
 8001844:	438a      	bics	r2, r1
 8001846:	621a      	str	r2, [r3, #32]
 8001848:	e01c      	b.n	8001884 <HAL_RCC_OscConfig+0x3a4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b05      	cmp	r3, #5
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x38c>
 8001852:	4bc2      	ldr	r3, [pc, #776]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	4bc1      	ldr	r3, [pc, #772]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001858:	2104      	movs	r1, #4
 800185a:	430a      	orrs	r2, r1
 800185c:	621a      	str	r2, [r3, #32]
 800185e:	4bbf      	ldr	r3, [pc, #764]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	4bbe      	ldr	r3, [pc, #760]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	621a      	str	r2, [r3, #32]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0x3a4>
 800186c:	4bbb      	ldr	r3, [pc, #748]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4bba      	ldr	r3, [pc, #744]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001872:	2101      	movs	r1, #1
 8001874:	438a      	bics	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
 8001878:	4bb8      	ldr	r3, [pc, #736]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800187a:	6a1a      	ldr	r2, [r3, #32]
 800187c:	4bb7      	ldr	r3, [pc, #732]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800187e:	2104      	movs	r1, #4
 8001880:	438a      	bics	r2, r1
 8001882:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d014      	beq.n	80018b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7ff fb60 	bl	8000f50 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	e009      	b.n	80018aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fb5b 	bl	8000f50 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4aaf      	ldr	r2, [pc, #700]	@ (8001b60 <HAL_RCC_OscConfig+0x680>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e19a      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018aa:	4bac      	ldr	r3, [pc, #688]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x3b6>
 80018b4:	e013      	b.n	80018de <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fb4b 	bl	8000f50 <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018be:	e009      	b.n	80018d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff fb46 	bl	8000f50 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	4aa5      	ldr	r2, [pc, #660]	@ (8001b60 <HAL_RCC_OscConfig+0x680>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e185      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	4ba1      	ldr	r3, [pc, #644]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018de:	231f      	movs	r3, #31
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	4b9b      	ldr	r3, [pc, #620]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80018ee:	499d      	ldr	r1, [pc, #628]	@ (8001b64 <HAL_RCC_OscConfig+0x684>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2210      	movs	r2, #16
 80018fa:	4013      	ands	r3, r2
 80018fc:	d063      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d12a      	bne.n	800195c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001906:	4b95      	ldr	r3, [pc, #596]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800190a:	4b94      	ldr	r3, [pc, #592]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800190c:	2104      	movs	r1, #4
 800190e:	430a      	orrs	r2, r1
 8001910:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001912:	4b92      	ldr	r3, [pc, #584]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001916:	4b91      	ldr	r3, [pc, #580]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff fb17 	bl	8000f50 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001928:	f7ff fb12 	bl	8000f50 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e152      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193e:	2202      	movs	r2, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d0f1      	beq.n	8001928 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001944:	4b85      	ldr	r3, [pc, #532]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001948:	22f8      	movs	r2, #248	@ 0xf8
 800194a:	4393      	bics	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	00da      	lsls	r2, r3, #3
 8001954:	4b81      	ldr	r3, [pc, #516]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001956:	430a      	orrs	r2, r1
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34
 800195a:	e034      	b.n	80019c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	3305      	adds	r3, #5
 8001962:	d111      	bne.n	8001988 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001964:	4b7d      	ldr	r3, [pc, #500]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001968:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800196a:	2104      	movs	r1, #4
 800196c:	438a      	bics	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001970:	4b7a      	ldr	r3, [pc, #488]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001974:	22f8      	movs	r2, #248	@ 0xf8
 8001976:	4393      	bics	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	00da      	lsls	r2, r3, #3
 8001980:	4b76      	ldr	r3, [pc, #472]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
 8001986:	e01e      	b.n	80019c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001988:	4b74      	ldr	r3, [pc, #464]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800198a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800198c:	4b73      	ldr	r3, [pc, #460]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800198e:	2104      	movs	r1, #4
 8001990:	430a      	orrs	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001994:	4b71      	ldr	r3, [pc, #452]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001998:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 800199a:	2101      	movs	r1, #1
 800199c:	438a      	bics	r2, r1
 800199e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7ff fad6 	bl	8000f50 <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019aa:	f7ff fad1 	bl	8000f50 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e111      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019bc:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80019be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c0:	2202      	movs	r2, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	d1f1      	bne.n	80019aa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2220      	movs	r2, #32
 80019cc:	4013      	ands	r3, r2
 80019ce:	d05c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019d0:	4b62      	ldr	r3, [pc, #392]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	220c      	movs	r2, #12
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d00e      	beq.n	80019fa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019dc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	220c      	movs	r2, #12
 80019e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d114      	bne.n	8001a12 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	23c0      	movs	r3, #192	@ 0xc0
 80019ee:	025b      	lsls	r3, r3, #9
 80019f0:	401a      	ands	r2, r3
 80019f2:	23c0      	movs	r3, #192	@ 0xc0
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019fa:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 80019fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	029b      	lsls	r3, r3, #10
 8001a02:	4013      	ands	r3, r2
 8001a04:	d040      	beq.n	8001a88 <HAL_RCC_OscConfig+0x5a8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d03c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0e6      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01b      	beq.n	8001a52 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a1a:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	0249      	lsls	r1, r1, #9
 8001a24:	430a      	orrs	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa92 	bl	8000f50 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a32:	f7ff fa8d 	bl	8000f50 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0cd      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a44:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x552>
 8001a50:	e01b      	b.n	8001a8a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a52:	4b42      	ldr	r3, [pc, #264]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001a58:	4943      	ldr	r1, [pc, #268]	@ (8001b68 <HAL_RCC_OscConfig+0x688>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fa77 	bl	8000f50 <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a68:	f7ff fa72 	bl	8000f50 <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b2      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a7a:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	029b      	lsls	r3, r3, #10
 8001a82:	4013      	ands	r3, r2
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x588>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a88:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d100      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5b4>
 8001a92:	e0a4      	b.n	8001bde <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a94:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	220c      	movs	r2, #12
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5c2>
 8001aa0:	e078      	b.n	8001b94 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d14c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001ab0:	492e      	ldr	r1, [pc, #184]	@ (8001b6c <HAL_RCC_OscConfig+0x68c>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fa4b 	bl	8000f50 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fa46 	bl	8000f50 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e086      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	@ 0x80
 8001ad8:	049b      	lsls	r3, r3, #18
 8001ada:	4013      	ands	r3, r2
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ade:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	4393      	bics	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001aee:	430a      	orrs	r2, r1
 8001af0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b70 <HAL_RCC_OscConfig+0x690>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	431a      	orrs	r2, r3
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	0449      	lsls	r1, r1, #17
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fa19 	bl	8000f50 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff fa14 	bl	8000f50 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e054      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	049b      	lsls	r3, r3, #18
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x644>
 8001b42:	e04c      	b.n	8001bde <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	4908      	ldr	r1, [pc, #32]	@ (8001b6c <HAL_RCC_OscConfig+0x68c>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f9fe 	bl	8000f50 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x6a6>
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	00001388 	.word	0x00001388
 8001b64:	efffffff 	.word	0xefffffff
 8001b68:	fffeffff 	.word	0xfffeffff
 8001b6c:	feffffff 	.word	0xfeffffff
 8001b70:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f9ec 	bl	8000f50 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e02c      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_RCC_OscConfig+0x708>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	049b      	lsls	r3, r3, #18
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x694>
 8001b92:	e024      	b.n	8001bde <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e01f      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_RCC_OscConfig+0x708>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_RCC_OscConfig+0x708>)
 8001ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001baa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	23c0      	movs	r3, #192	@ 0xc0
 8001bb0:	025b      	lsls	r3, r3, #9
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d10e      	bne.n	8001bda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	23f0      	movs	r3, #240	@ 0xf0
 8001bce:	039b      	lsls	r3, r3, #14
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b008      	add	sp, #32
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0bf      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b61      	ldr	r3, [pc, #388]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d911      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	4b5b      	ldr	r3, [pc, #364]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	4b59      	ldr	r3, [pc, #356]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0a6      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d015      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d006      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c46:	4b51      	ldr	r3, [pc, #324]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4b50      	ldr	r3, [pc, #320]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001c4c:	21e0      	movs	r1, #224	@ 0xe0
 8001c4e:	00c9      	lsls	r1, r1, #3
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b4d      	ldr	r3, [pc, #308]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	22f0      	movs	r2, #240	@ 0xf0
 8001c5a:	4393      	bics	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4b4a      	ldr	r3, [pc, #296]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d04c      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b44      	ldr	r3, [pc, #272]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	029b      	lsls	r3, r3, #10
 8001c82:	4013      	ands	r3, r2
 8001c84:	d120      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07a      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b3e      	ldr	r3, [pc, #248]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	049b      	lsls	r3, r3, #18
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d114      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06e      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e062      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b34      	ldr	r3, [pc, #208]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e05b      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc8:	4b30      	ldr	r3, [pc, #192]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f938 	bl	8000f50 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	e009      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce6:	f7ff f933 	bl	8000f50 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <HAL_RCC_ClockConfig+0x1a4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e042      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	220c      	movs	r2, #12
 8001d00:	401a      	ands	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1ec      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d211      	bcs.n	8001d3e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2c:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <HAL_RCC_ClockConfig+0x19c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e020      	b.n	8001d80 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	@ (8001d94 <HAL_RCC_ClockConfig+0x1a8>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d5c:	f000 f820 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d60:	0001      	movs	r1, r0
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_RCC_ClockConfig+0x1a0>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	220f      	movs	r2, #15
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ac>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	000a      	movs	r2, r1
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff f8a3 	bl	8000ec4 <HAL_InitTick>
  
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b004      	add	sp, #16
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	00001388 	.word	0x00001388
 8001d94:	fffff8ff 	.word	0xfffff8ff
 8001d98:	08002d70 	.word	0x08002d70
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d046      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0xb8>
 8001dca:	d848      	bhi.n	8001e5e <HAL_RCC_GetSysClockFreq+0xbe>
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d002      	beq.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d003      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x3c>
 8001dd4:	e043      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd6:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001dd8:	613b      	str	r3, [r7, #16]
      break;
 8001dda:	e043      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	0c9b      	lsrs	r3, r3, #18
 8001de0:	220f      	movs	r2, #15
 8001de2:	4013      	ands	r3, r2
 8001de4:	4a24      	ldr	r2, [pc, #144]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	220f      	movs	r2, #15
 8001df0:	4013      	ands	r3, r2
 8001df2:	4a22      	ldr	r2, [pc, #136]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	23c0      	movs	r3, #192	@ 0xc0
 8001dfc:	025b      	lsls	r3, r3, #9
 8001dfe:	401a      	ands	r2, r3
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	481a      	ldr	r0, [pc, #104]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e0c:	f7fe f97c 	bl	8000108 <__udivsi3>
 8001e10:	0003      	movs	r3, r0
 8001e12:	001a      	movs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4353      	muls	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e01a      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	23c0      	movs	r3, #192	@ 0xc0
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	401a      	ands	r2, r3
 8001e24:	23c0      	movs	r3, #192	@ 0xc0
 8001e26:	025b      	lsls	r3, r3, #9
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d109      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	4814      	ldr	r0, [pc, #80]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e30:	f7fe f96a 	bl	8000108 <__udivsi3>
 8001e34:	0003      	movs	r3, r0
 8001e36:	001a      	movs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4353      	muls	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e44:	f7fe f960 	bl	8000108 <__udivsi3>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4353      	muls	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	613b      	str	r3, [r7, #16]
      break;
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e5a:	613b      	str	r3, [r7, #16]
      break;
 8001e5c:	e002      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e60:	613b      	str	r3, [r7, #16]
      break;
 8001e62:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e64:	693b      	ldr	r3, [r7, #16]
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b006      	add	sp, #24
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	40021000 	.word	0x40021000
 8001e74:	007a1200 	.word	0x007a1200
 8001e78:	08002d80 	.word	0x08002d80
 8001e7c:	08002d90 	.word	0x08002d90
 8001e80:	02dc6c00 	.word	0x02dc6c00

08001e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0a8      	b.n	8001fe8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	2382      	movs	r3, #130	@ 0x82
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d009      	beq.n	8001ebe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
 8001eb0:	e005      	b.n	8001ebe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	225d      	movs	r2, #93	@ 0x5d
 8001ec8:	5c9b      	ldrb	r3, [r3, r2]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	225c      	movs	r2, #92	@ 0x5c
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7fe ff04 	bl	8000ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	225d      	movs	r2, #93	@ 0x5d
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2140      	movs	r1, #64	@ 0x40
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	23e0      	movs	r3, #224	@ 0xe0
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d902      	bls.n	8001f0a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e002      	b.n	8001f10 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	015b      	lsls	r3, r3, #5
 8001f0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	23f0      	movs	r3, #240	@ 0xf0
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d008      	beq.n	8001f2e <HAL_SPI_Init+0xaa>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	23e0      	movs	r3, #224	@ 0xe0
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d002      	beq.n	8001f2e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	2382      	movs	r3, #130	@ 0x82
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	401a      	ands	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	2384      	movs	r3, #132	@ 0x84
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	400b      	ands	r3, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2102      	movs	r1, #2
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2101      	movs	r1, #1
 8001f54:	400b      	ands	r3, r1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6999      	ldr	r1, [r3, #24]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	400b      	ands	r3, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	2138      	movs	r1, #56	@ 0x38
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	2180      	movs	r1, #128	@ 0x80
 8001f74:	400b      	ands	r3, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	0011      	movs	r1, r2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	019b      	lsls	r3, r3, #6
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	2204      	movs	r2, #4
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa4:	2108      	movs	r1, #8
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	23f0      	movs	r3, #240	@ 0xf0
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4907      	ldr	r1, [pc, #28]	@ (8001ff0 <HAL_SPI_Init+0x16c>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	225d      	movs	r2, #93	@ 0x5d
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	fffff7ff 	.word	0xfffff7ff

08001ff4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002004:	231f      	movs	r3, #31
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	225c      	movs	r2, #92	@ 0x5c
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_SPI_Transmit+0x26>
 8002016:	2302      	movs	r3, #2
 8002018:	e147      	b.n	80022aa <HAL_SPI_Transmit+0x2b6>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	225c      	movs	r2, #92	@ 0x5c
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002022:	f7fe ff95 	bl	8000f50 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800202a:	2316      	movs	r3, #22
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	1dba      	adds	r2, r7, #6
 8002030:	8812      	ldrh	r2, [r2, #0]
 8002032:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	225d      	movs	r2, #93	@ 0x5d
 8002038:	5c9b      	ldrb	r3, [r3, r2]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d004      	beq.n	800204a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002040:	231f      	movs	r3, #31
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
    goto error;
 8002048:	e128      	b.n	800229c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_SPI_Transmit+0x64>
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d104      	bne.n	8002062 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002058:	231f      	movs	r3, #31
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002060:	e11c      	b.n	800229c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	225d      	movs	r2, #93	@ 0x5d
 8002066:	2103      	movs	r1, #3
 8002068:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1dba      	adds	r2, r7, #6
 800207a:	8812      	ldrh	r2, [r2, #0]
 800207c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1dba      	adds	r2, r7, #6
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2244      	movs	r2, #68	@ 0x44
 8002090:	2100      	movs	r1, #0
 8002092:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2246      	movs	r2, #70	@ 0x46
 8002098:	2100      	movs	r1, #0
 800209a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d110      	bne.n	80020d6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2140      	movs	r1, #64	@ 0x40
 80020c0:	438a      	bics	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2180      	movs	r1, #128	@ 0x80
 80020d0:	01c9      	lsls	r1, r1, #7
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2240      	movs	r2, #64	@ 0x40
 80020de:	4013      	ands	r3, r2
 80020e0:	2b40      	cmp	r3, #64	@ 0x40
 80020e2:	d007      	beq.n	80020f4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2140      	movs	r1, #64	@ 0x40
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	23e0      	movs	r3, #224	@ 0xe0
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d952      	bls.n	80021a6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_SPI_Transmit+0x11e>
 8002108:	2316      	movs	r3, #22
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d143      	bne.n	800219a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002122:	1c9a      	adds	r2, r3, #2
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002136:	e030      	b.n	800219a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d112      	bne.n	800216c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214a:	881a      	ldrh	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	1c9a      	adds	r2, r3, #2
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800216a:	e016      	b.n	800219a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800216c:	f7fe fef0 	bl	8000f50 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d802      	bhi.n	8002182 <HAL_SPI_Transmit+0x18e>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_SPI_Transmit+0x194>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d108      	bne.n	800219a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002188:	231f      	movs	r3, #31
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2203      	movs	r2, #3
 800218e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	225d      	movs	r2, #93	@ 0x5d
 8002194:	2101      	movs	r1, #1
 8002196:	5499      	strb	r1, [r3, r2]
          goto error;
 8002198:	e080      	b.n	800229c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1c9      	bne.n	8002138 <HAL_SPI_Transmit+0x144>
 80021a4:	e053      	b.n	800224e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <HAL_SPI_Transmit+0x1c4>
 80021ae:	2316      	movs	r3, #22
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d145      	bne.n	8002244 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80021de:	e031      	b.n	8002244 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2202      	movs	r2, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d113      	bne.n	8002216 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330c      	adds	r3, #12
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002214:	e016      	b.n	8002244 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002216:	f7fe fe9b 	bl	8000f50 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d802      	bhi.n	800222c <HAL_SPI_Transmit+0x238>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	d102      	bne.n	8002232 <HAL_SPI_Transmit+0x23e>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002232:	231f      	movs	r3, #31
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	2203      	movs	r2, #3
 8002238:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	225d      	movs	r2, #93	@ 0x5d
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]
          goto error;
 8002242:	e02b      	b.n	800229c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1c8      	bne.n	80021e0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 fcef 	bl	8002c38 <SPI_EndRxTxTransaction>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d002      	beq.n	8002264 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800228a:	231f      	movs	r3, #31
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e003      	b.n	800229c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	225d      	movs	r2, #93	@ 0x5d
 8002298:	2101      	movs	r1, #1
 800229a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	225c      	movs	r2, #92	@ 0x5c
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022a4:	231f      	movs	r3, #31
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b008      	add	sp, #32
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022c4:	2117      	movs	r1, #23
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	225d      	movs	r2, #93	@ 0x5d
 80022d0:	5c9b      	ldrb	r3, [r3, r2]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d003      	beq.n	80022e0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80022de:	e12b      	b.n	8002538 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2382      	movs	r3, #130	@ 0x82
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d113      	bne.n	8002314 <HAL_SPI_Receive+0x60>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10f      	bne.n	8002314 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	225d      	movs	r2, #93	@ 0x5d
 80022f8:	2104      	movs	r1, #4
 80022fa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022fc:	1dbb      	adds	r3, r7, #6
 80022fe:	881c      	ldrh	r4, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	0023      	movs	r3, r4
 800230c:	f000 f924 	bl	8002558 <HAL_SPI_TransmitReceive>
 8002310:	0003      	movs	r3, r0
 8002312:	e118      	b.n	8002546 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	225c      	movs	r2, #92	@ 0x5c
 8002318:	5c9b      	ldrb	r3, [r3, r2]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_SPI_Receive+0x6e>
 800231e:	2302      	movs	r3, #2
 8002320:	e111      	b.n	8002546 <HAL_SPI_Receive+0x292>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	225c      	movs	r2, #92	@ 0x5c
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800232a:	f7fe fe11 	bl	8000f50 <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_SPI_Receive+0x8c>
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002340:	2317      	movs	r3, #23
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
    goto error;
 8002348:	e0f6      	b.n	8002538 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	225d      	movs	r2, #93	@ 0x5d
 800234e:	2104      	movs	r1, #4
 8002350:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1dba      	adds	r2, r7, #6
 8002362:	2144      	movs	r1, #68	@ 0x44
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1dba      	adds	r2, r7, #6
 800236c:	2146      	movs	r1, #70	@ 0x46
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	23e0      	movs	r3, #224	@ 0xe0
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	429a      	cmp	r2, r3
 800239a:	d908      	bls.n	80023ae <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	496a      	ldr	r1, [pc, #424]	@ (8002550 <HAL_SPI_Receive+0x29c>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	e008      	b.n	80023c0 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	0149      	lsls	r1, r1, #5
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d10f      	bne.n	80023ec <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2140      	movs	r1, #64	@ 0x40
 80023d8:	438a      	bics	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	495b      	ldr	r1, [pc, #364]	@ (8002554 <HAL_SPI_Receive+0x2a0>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b40      	cmp	r3, #64	@ 0x40
 80023f8:	d007      	beq.n	800240a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2140      	movs	r1, #64	@ 0x40
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	23e0      	movs	r3, #224	@ 0xe0
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	429a      	cmp	r2, r3
 8002414:	d900      	bls.n	8002418 <HAL_SPI_Receive+0x164>
 8002416:	e071      	b.n	80024fc <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002418:	e035      	b.n	8002486 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	2b01      	cmp	r3, #1
 8002426:	d117      	bne.n	8002458 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	001a      	movs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2246      	movs	r2, #70	@ 0x46
 8002448:	5a9b      	ldrh	r3, [r3, r2]
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b299      	uxth	r1, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2246      	movs	r2, #70	@ 0x46
 8002454:	5299      	strh	r1, [r3, r2]
 8002456:	e016      	b.n	8002486 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002458:	f7fe fd7a 	bl	8000f50 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d802      	bhi.n	800246e <HAL_SPI_Receive+0x1ba>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_SPI_Receive+0x1c0>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d108      	bne.n	8002486 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002474:	2317      	movs	r3, #23
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	225d      	movs	r2, #93	@ 0x5d
 8002480:	2101      	movs	r1, #1
 8002482:	5499      	strb	r1, [r3, r2]
          goto error;
 8002484:	e058      	b.n	8002538 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2246      	movs	r2, #70	@ 0x46
 800248a:	5a9b      	ldrh	r3, [r3, r2]
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1c3      	bne.n	800241a <HAL_SPI_Receive+0x166>
 8002492:	e039      	b.n	8002508 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2201      	movs	r2, #1
 800249c:	4013      	ands	r3, r2
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d115      	bne.n	80024ce <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	b292      	uxth	r2, r2
 80024ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	1c9a      	adds	r2, r3, #2
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2246      	movs	r2, #70	@ 0x46
 80024be:	5a9b      	ldrh	r3, [r3, r2]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b299      	uxth	r1, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2246      	movs	r2, #70	@ 0x46
 80024ca:	5299      	strh	r1, [r3, r2]
 80024cc:	e016      	b.n	80024fc <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ce:	f7fe fd3f 	bl	8000f50 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d802      	bhi.n	80024e4 <HAL_SPI_Receive+0x230>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	d102      	bne.n	80024ea <HAL_SPI_Receive+0x236>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80024ea:	2317      	movs	r3, #23
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2203      	movs	r2, #3
 80024f0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	225d      	movs	r2, #93	@ 0x5d
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]
          goto error;
 80024fa:	e01d      	b.n	8002538 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2246      	movs	r2, #70	@ 0x46
 8002500:	5a9b      	ldrh	r3, [r3, r2]
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1c5      	bne.n	8002494 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	0018      	movs	r0, r3
 8002510:	f000 fb34 	bl	8002b7c <SPI_EndRxTransaction>
 8002514:	1e03      	subs	r3, r0, #0
 8002516:	d002      	beq.n	800251e <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002526:	2317      	movs	r3, #23
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e003      	b.n	8002538 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	225d      	movs	r2, #93	@ 0x5d
 8002534:	2101      	movs	r1, #1
 8002536:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	225c      	movs	r2, #92	@ 0x5c
 800253c:	2100      	movs	r1, #0
 800253e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002540:	2317      	movs	r3, #23
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b007      	add	sp, #28
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	ffffefff 	.word	0xffffefff
 8002554:	ffffbfff 	.word	0xffffbfff

08002558 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	001a      	movs	r2, r3
 8002566:	1cbb      	adds	r3, r7, #2
 8002568:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800256a:	2301      	movs	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800256e:	2323      	movs	r3, #35	@ 0x23
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	225c      	movs	r2, #92	@ 0x5c
 800257a:	5c9b      	ldrb	r3, [r3, r2]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x2c>
 8002580:	2302      	movs	r3, #2
 8002582:	e1c4      	b.n	800290e <HAL_SPI_TransmitReceive+0x3b6>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	225c      	movs	r2, #92	@ 0x5c
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800258c:	f7fe fce0 	bl	8000f50 <HAL_GetTick>
 8002590:	0003      	movs	r3, r0
 8002592:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002594:	201b      	movs	r0, #27
 8002596:	183b      	adds	r3, r7, r0
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	215d      	movs	r1, #93	@ 0x5d
 800259c:	5c52      	ldrb	r2, [r2, r1]
 800259e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80025a6:	2312      	movs	r3, #18
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	1cba      	adds	r2, r7, #2
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025b0:	183b      	adds	r3, r7, r0
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d011      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x84>
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	2382      	movs	r3, #130	@ 0x82
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	429a      	cmp	r2, r3
 80025c0:	d107      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x7a>
 80025ca:	183b      	adds	r3, r7, r0
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d004      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80025d2:	2323      	movs	r3, #35	@ 0x23
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2202      	movs	r2, #2
 80025d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80025da:	e191      	b.n	8002900 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x98>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x98>
 80025e8:	1cbb      	adds	r3, r7, #2
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80025f0:	2323      	movs	r3, #35	@ 0x23
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80025f8:	e182      	b.n	8002900 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	225d      	movs	r2, #93	@ 0x5d
 80025fe:	5c9b      	ldrb	r3, [r3, r2]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b04      	cmp	r3, #4
 8002604:	d003      	beq.n	800260e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	225d      	movs	r2, #93	@ 0x5d
 800260a:	2105      	movs	r1, #5
 800260c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1cba      	adds	r2, r7, #2
 800261e:	2146      	movs	r1, #70	@ 0x46
 8002620:	8812      	ldrh	r2, [r2, #0]
 8002622:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1cba      	adds	r2, r7, #2
 8002628:	2144      	movs	r1, #68	@ 0x44
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1cba      	adds	r2, r7, #2
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1cba      	adds	r2, r7, #2
 8002640:	8812      	ldrh	r2, [r2, #0]
 8002642:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	23e0      	movs	r3, #224	@ 0xe0
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	429a      	cmp	r2, r3
 800265a:	d908      	bls.n	800266e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	49ac      	ldr	r1, [pc, #688]	@ (8002918 <HAL_SPI_TransmitReceive+0x3c0>)
 8002668:	400a      	ands	r2, r1
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e008      	b.n	8002680 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2180      	movs	r1, #128	@ 0x80
 800267a:	0149      	lsls	r1, r1, #5
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2240      	movs	r2, #64	@ 0x40
 8002688:	4013      	ands	r3, r2
 800268a:	2b40      	cmp	r3, #64	@ 0x40
 800268c:	d007      	beq.n	800269e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2140      	movs	r1, #64	@ 0x40
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	23e0      	movs	r3, #224	@ 0xe0
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d800      	bhi.n	80026ac <HAL_SPI_TransmitReceive+0x154>
 80026aa:	e083      	b.n	80027b4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x168>
 80026b4:	2312      	movs	r3, #18
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d000      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x168>
 80026be:	e06d      	b.n	800279c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	1c9a      	adds	r2, r3, #2
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e4:	e05a      	b.n	800279c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d11b      	bne.n	800272c <HAL_SPI_TransmitReceive+0x1d4>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_SPI_TransmitReceive+0x1d4>
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	2b01      	cmp	r3, #1
 8002702:	d113      	bne.n	800272c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002714:	1c9a      	adds	r2, r3, #2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	2b01      	cmp	r3, #1
 8002738:	d11c      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x21c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2246      	movs	r2, #70	@ 0x46
 800273e:	5a9b      	ldrh	r3, [r3, r2]
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	b292      	uxth	r2, r2
 8002752:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	1c9a      	adds	r2, r3, #2
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2246      	movs	r2, #70	@ 0x46
 8002762:	5a9b      	ldrh	r3, [r3, r2]
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b299      	uxth	r1, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2246      	movs	r2, #70	@ 0x46
 800276e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002770:	2301      	movs	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002774:	f7fe fbec 	bl	8000f50 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002780:	429a      	cmp	r2, r3
 8002782:	d80b      	bhi.n	800279c <HAL_SPI_TransmitReceive+0x244>
 8002784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002786:	3301      	adds	r3, #1
 8002788:	d008      	beq.n	800279c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800278a:	2323      	movs	r3, #35	@ 0x23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2203      	movs	r2, #3
 8002790:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	225d      	movs	r2, #93	@ 0x5d
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
        goto error;
 800279a:	e0b1      	b.n	8002900 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d19f      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x18e>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2246      	movs	r2, #70	@ 0x46
 80027aa:	5a9b      	ldrh	r3, [r3, r2]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d199      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x18e>
 80027b2:	e089      	b.n	80028c8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_SPI_TransmitReceive+0x270>
 80027bc:	2312      	movs	r3, #18
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d000      	beq.n	80027c8 <HAL_SPI_TransmitReceive+0x270>
 80027c6:	e074      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ee:	e060      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d11c      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x2e0>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d017      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x2e0>
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	2b01      	cmp	r3, #1
 800280c:	d114      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2201      	movs	r2, #1
 8002840:	4013      	ands	r3, r2
 8002842:	2b01      	cmp	r3, #1
 8002844:	d11e      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x32c>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2246      	movs	r2, #70	@ 0x46
 800284a:	5a9b      	ldrh	r3, [r3, r2]
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d018      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	001a      	movs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2246      	movs	r2, #70	@ 0x46
 8002872:	5a9b      	ldrh	r3, [r3, r2]
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b299      	uxth	r1, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2246      	movs	r2, #70	@ 0x46
 800287e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002880:	2301      	movs	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002884:	f7fe fb64 	bl	8000f50 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002890:	429a      	cmp	r2, r3
 8002892:	d802      	bhi.n	800289a <HAL_SPI_TransmitReceive+0x342>
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	3301      	adds	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x348>
 800289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d108      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80028a0:	2323      	movs	r3, #35	@ 0x23
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	2203      	movs	r2, #3
 80028a6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	225d      	movs	r2, #93	@ 0x5d
 80028ac:	2101      	movs	r1, #1
 80028ae:	5499      	strb	r1, [r3, r2]
        goto error;
 80028b0:	e026      	b.n	8002900 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d199      	bne.n	80027f0 <HAL_SPI_TransmitReceive+0x298>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2246      	movs	r2, #70	@ 0x46
 80028c0:	5a9b      	ldrh	r3, [r3, r2]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d193      	bne.n	80027f0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 f9b2 	bl	8002c38 <SPI_EndRxTxTransaction>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80028d8:	2323      	movs	r3, #35	@ 0x23
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80028ee:	2323      	movs	r3, #35	@ 0x23
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e003      	b.n	8002900 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	225d      	movs	r2, #93	@ 0x5d
 80028fc:	2101      	movs	r1, #1
 80028fe:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	225c      	movs	r2, #92	@ 0x5c
 8002904:	2100      	movs	r1, #0
 8002906:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002908:	2323      	movs	r3, #35	@ 0x23
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b00a      	add	sp, #40	@ 0x28
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	ffffefff 	.word	0xffffefff

0800291c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	1dfb      	adds	r3, r7, #7
 800292a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800292c:	f7fe fb10 	bl	8000f50 <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	18d3      	adds	r3, r2, r3
 800293a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800293c:	f7fe fb08 	bl	8000f50 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002944:	4b3a      	ldr	r3, [pc, #232]	@ (8002a30 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	015b      	lsls	r3, r3, #5
 800294a:	0d1b      	lsrs	r3, r3, #20
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	4353      	muls	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002952:	e058      	b.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	d055      	beq.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800295a:	f7fe faf9 	bl	8000f50 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	429a      	cmp	r2, r3
 8002968:	d902      	bls.n	8002970 <SPI_WaitFlagStateUntilTimeout+0x54>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d142      	bne.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	21e0      	movs	r1, #224	@ 0xe0
 800297c:	438a      	bics	r2, r1
 800297e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	2382      	movs	r3, #130	@ 0x82
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	429a      	cmp	r2, r3
 800298a:	d113      	bne.n	80029b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	429a      	cmp	r2, r3
 8002996:	d005      	beq.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2140      	movs	r1, #64	@ 0x40
 80029b0:	438a      	bics	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	019b      	lsls	r3, r3, #6
 80029bc:	429a      	cmp	r2, r3
 80029be:	d110      	bne.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	491a      	ldr	r1, [pc, #104]	@ (8002a34 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80029cc:	400a      	ands	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2180      	movs	r1, #128	@ 0x80
 80029dc:	0189      	lsls	r1, r1, #6
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	225d      	movs	r2, #93	@ 0x5d
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	225c      	movs	r2, #92	@ 0x5c
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e017      	b.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	425a      	negs	r2, r3
 8002a16:	4153      	adcs	r3, r2
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	001a      	movs	r2, r3
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d197      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b008      	add	sp, #32
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	20000000 	.word	0x20000000
 8002a34:	ffffdfff 	.word	0xffffdfff

08002a38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	@ 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002a46:	2317      	movs	r3, #23
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a4e:	f7fe fa7f 	bl	8000f50 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	18d3      	adds	r3, r2, r3
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002a5e:	f7fe fa77 	bl	8000f50 <HAL_GetTick>
 8002a62:	0003      	movs	r3, r0
 8002a64:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a6e:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	0013      	movs	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	00da      	lsls	r2, r3, #3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	0d1b      	lsrs	r3, r3, #20
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	4353      	muls	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a84:	e068      	b.n	8002b58 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	23c0      	movs	r3, #192	@ 0xc0
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d10a      	bne.n	8002aa6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	2117      	movs	r1, #23
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	d055      	beq.n	8002b58 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aac:	f7fe fa50 	bl	8000f50 <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d902      	bls.n	8002ac2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d142      	bne.n	8002b48 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	21e0      	movs	r1, #224	@ 0xe0
 8002ace:	438a      	bics	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	2382      	movs	r3, #130	@ 0x82
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d113      	bne.n	8002b06 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d005      	beq.n	8002af6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	2380      	movs	r3, #128	@ 0x80
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d107      	bne.n	8002b06 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2140      	movs	r1, #64	@ 0x40
 8002b02:	438a      	bics	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d110      	bne.n	8002b34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4916      	ldr	r1, [pc, #88]	@ (8002b78 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	0189      	lsls	r1, r1, #6
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	225d      	movs	r2, #93	@ 0x5d
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	225c      	movs	r2, #92	@ 0x5c
 8002b40:	2100      	movs	r1, #0
 8002b42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e010      	b.n	8002b6a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d18e      	bne.n	8002a86 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b00a      	add	sp, #40	@ 0x28
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	20000000 	.word	0x20000000
 8002b78:	ffffdfff 	.word	0xffffdfff

08002b7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	2382      	movs	r3, #130	@ 0x82
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d113      	bne.n	8002bbc <SPI_EndRxTransaction+0x40>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d005      	beq.n	8002bac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2140      	movs	r1, #64	@ 0x40
 8002bb8:	438a      	bics	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	f7ff fea7 	bl	800291c <SPI_WaitFlagStateUntilTimeout>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d007      	beq.n	8002be2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e026      	b.n	8002c30 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	2382      	movs	r3, #130	@ 0x82
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11f      	bne.n	8002c2e <SPI_EndRxTransaction+0xb2>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d005      	beq.n	8002c06 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d113      	bne.n	8002c2e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	23c0      	movs	r3, #192	@ 0xc0
 8002c0a:	00d9      	lsls	r1, r3, #3
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	0013      	movs	r3, r2
 8002c14:	2200      	movs	r2, #0
 8002c16:	f7ff ff0f 	bl	8002a38 <SPI_WaitFifoStateUntilTimeout>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d007      	beq.n	8002c2e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c22:	2220      	movs	r2, #32
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e000      	b.n	8002c30 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	23c0      	movs	r3, #192	@ 0xc0
 8002c48:	0159      	lsls	r1, r3, #5
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	0013      	movs	r3, r2
 8002c52:	2200      	movs	r2, #0
 8002c54:	f7ff fef0 	bl	8002a38 <SPI_WaitFifoStateUntilTimeout>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d007      	beq.n	8002c6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c60:	2220      	movs	r2, #32
 8002c62:	431a      	orrs	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e027      	b.n	8002cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	0013      	movs	r3, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	2180      	movs	r1, #128	@ 0x80
 8002c7a:	f7ff fe4f 	bl	800291c <SPI_WaitFlagStateUntilTimeout>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d007      	beq.n	8002c92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	2220      	movs	r2, #32
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e014      	b.n	8002cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	23c0      	movs	r3, #192	@ 0xc0
 8002c96:	00d9      	lsls	r1, r3, #3
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f7ff fec9 	bl	8002a38 <SPI_WaitFifoStateUntilTimeout>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d007      	beq.n	8002cba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cae:	2220      	movs	r2, #32
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e000      	b.n	8002cbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b004      	add	sp, #16
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <memset>:
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	1882      	adds	r2, r0, r2
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	7019      	strb	r1, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <strstr>:
 8002cd4:	780a      	ldrb	r2, [r1, #0]
 8002cd6:	b530      	push	{r4, r5, lr}
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	d10c      	bne.n	8002cf6 <strstr+0x22>
 8002cdc:	bd30      	pop	{r4, r5, pc}
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d108      	bne.n	8002cf4 <strstr+0x20>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	5ccc      	ldrb	r4, [r1, r3]
 8002ce6:	2c00      	cmp	r4, #0
 8002ce8:	d0f8      	beq.n	8002cdc <strstr+0x8>
 8002cea:	5cc5      	ldrb	r5, [r0, r3]
 8002cec:	42a5      	cmp	r5, r4
 8002cee:	d101      	bne.n	8002cf4 <strstr+0x20>
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e7f7      	b.n	8002ce4 <strstr+0x10>
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	7803      	ldrb	r3, [r0, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <strstr+0xa>
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	e7ed      	b.n	8002cdc <strstr+0x8>

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	2600      	movs	r6, #0
 8002d04:	4c0c      	ldr	r4, [pc, #48]	@ (8002d38 <__libc_init_array+0x38>)
 8002d06:	4d0d      	ldr	r5, [pc, #52]	@ (8002d3c <__libc_init_array+0x3c>)
 8002d08:	1b64      	subs	r4, r4, r5
 8002d0a:	10a4      	asrs	r4, r4, #2
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	2600      	movs	r6, #0
 8002d12:	f000 f819 	bl	8002d48 <_init>
 8002d16:	4c0a      	ldr	r4, [pc, #40]	@ (8002d40 <__libc_init_array+0x40>)
 8002d18:	4d0a      	ldr	r5, [pc, #40]	@ (8002d44 <__libc_init_array+0x44>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	00b3      	lsls	r3, r6, #2
 8002d26:	58eb      	ldr	r3, [r5, r3]
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	00b3      	lsls	r3, r6, #2
 8002d30:	58eb      	ldr	r3, [r5, r3]
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002da0 	.word	0x08002da0
 8002d3c:	08002da0 	.word	0x08002da0
 8002d40:	08002da4 	.word	0x08002da4
 8002d44:	08002da0 	.word	0x08002da0

08002d48 <_init>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr

08002d54 <_fini>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr
